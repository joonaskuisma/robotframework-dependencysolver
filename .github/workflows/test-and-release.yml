name: Test and Release

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - "v*"
  pull_request:
    branches:
      - main

jobs:
  smoke_tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.13"]
        robotframework-version: ["4.0.3", "7.2.2"]
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
 
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "robotframework==${{ matrix.robotframework-version }}"

      - name: Install package
        run: pip install -e .[dev]

      - name: Run tests with pytest
        run: pytest tests/

      - run: echo "🍏 Test job's status is ${{ job.status }}."

  release_test:
    name: Run Release Tests (Full Matrix)
    needs: smoke_tests
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        robotframework-version: ["4.0.3", "4.1.3", "5.0.1", "6.0.2", "6.1.1", "7.0.1", "7.1.1", "7.2.2"]
      #pabot-version: ["4.1"]
      #dependencylib-version: ["4.0"]
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
 
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."

      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "robotframework==${{ matrix.robotframework-version }}"
        #pip install pytest coverage
        #pip install "robotframework-pabot==${{ matrix.pabot-version }}"
        #pip install "robotframework-dependencylibrary==${{ matrix.dependencylib-version }}"

      - name: Install package
        run: pip install -e .[dev]

      - name: Run tests with pytest
        run: pytest tests/
      #run: pytest --cov=DependencySolver tests/

      #- name: Upload test results
      #  uses: actions/upload-artifact@v4
      #  if: always()
      #  with:
      #    name: pytest-test-results
      #    path: coverage.xml
      - run: echo "🍏 Test job's status is ${{ job.status }}."

  release:
    name: Build and Release
    needs: release_test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate final release notes
        run: |
          echo "# 🚀 Release ${{ github.ref_name }} – $(date +'%Y-%m-%d')" > final_release_notes.md
          echo "" >> final_release_notes.md
          echo "🔧 Release created by **${{ github.actor }}**" >> final_release_notes.md
          echo "" >> final_release_notes.md
          cat release_notes.md >> final_release_notes.md
          echo "" >> final_release_notes.md
          echo "### 📝 Additional Notes" >> final_release_notes.md
          echo "- 📌 See the full **changelog**: [CHANGELOG.md](https://github.com/joonaskuisma/robotframework-dependencysolver/blob/main/CHANGELOG.md)" >> final_release_notes.md
          echo "- 📢 Report issues or feedback at: [Issues](https://github.com/joonaskuisma/robotframework-dependencysolver/issues)" >> final_release_notes.md
          echo "" >> final_release_notes.md
          echo "Thanks to all contributors for making this release possible! 🎉🚀" >> final_release_notes.md

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Upload release assets to GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: false
          body_path: final_release_notes.md
          files: |
            dist/*.tar.gz
            dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Wait for PyPI package availability
        run: |
          PACKAGE_NAME=robotframework-dependencysolver
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          sleep 5
          for i in {1..10}; do
            if curl --silent --fail "https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json" > /dev/null; then
              echo "Package $PACKAGE_NAME@$VERSION is available on PyPI!"
              exit 0
            fi
            echo "Package not available yet, retrying in 5s..."
            sleep 5
          done
          echo "Package did not become available in time" >&2
          exit 1

      - run: echo "🍏 Release job's status is ${{ job.status }}."
